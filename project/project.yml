title: "ECB+GPT AMR Experiments with spaCy and prodigy"
description: ""

vars:
  gpu: 0
  ecb-dir: corpus/ecb
  ecb-mention-map: corpus/ecb/mention_map.pkl
  pb-dict-path: outputs/common/pb.dict
  dev_iter_mids: annotations/ecb/dev_iter/mention_ids.txt
  pb-port: 8700

directories:
  - "configs"
  - "assets"
  - "corpus"
  - "scripts"
  - "recipes"
  - "outputs"
  - "metrics"
  - "annotations"

workflows:
  gpt-amr:
    - "ecb-setup"


assets:
  - dest: "assets/ecb"
    help: "The Event Coref Bank Plus Corpus"
    git:
      repo: "https://github.com/cltl/ecbPlus"
      branch: "master"
      path: "ECB+_LREC2014"

  - dest: "assets/propbank_frames"
    desc: "The Proposition Bank Frame Files"
    git:
      repo: "https://github.com/propbank/propbank-frames"
      branch: "main"
      path: "frames"

  - dest: "assets/propbank_scripts"
    desc: "The Proposition Bank Website Scripts"
    git:
      repo: "https://github.com/ahmeshaf/propbank-frames"
      branch: "main"
      path: "scripts"

commands:
  - name: "ecb-setup"
    help: "Preprocess and Create mention_map from ECB+ corpus"
    script:
      - python -m scripts.parse_ecb parse-annotations assets/ecb ${vars.ecb-dir} en_core_web_lg
    deps:
      - assets/ecb
    outputs:
      - ${vars.ecb-mention-map}

  - name: "save-propbank-dict"
    help: "generate an easy to use propbank dictionary for roleset definitions"
    script:
      - python -m scripts.parse_propbank assets/propbank_frames ${vars.pb-dict-path}
    deps:
      - assets/propbank_frames
    outputs:
      - ${vars.pb-dict-path}

  - name: "propbank-website"
    help: "run the propbank website"
    script:
      - python assets/propbank_scripts/create_frame_website.py --input ./assets/propbank_frames/ --output ./outputs/propbank
      - python -m http.server ${vars.pb-port} --directory ./outputs/propbank/ --bind 0.0.0.0

  - name: "create-ecb-tasks"
    help: "Create ECB+ Tasks for each Split"
    script:
      - python -m scripts.parse_ecb create-evt-tasks ./corpus/ecb/mention_map.pkl ./corpus/ecb/tasks/train.json train
      - python -m scripts.parse_ecb create-evt-tasks ./corpus/ecb/mention_map.pkl ./corpus/ecb/tasks/dev.json dev
      - python -m scripts.parse_ecb create-evt-tasks ./corpus/ecb/mention_map.pkl ./corpus/ecb/tasks/test.json test

  - name: "gpt-simple"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.gpt_pe gpt-simple 
        ${vars.ecb-mention-map} ${vars.dev_iter_mids} 
        outputs/gpt_simple_22June.json gpt-3.5-turbo
        --cache-file outputs/cache/gpt_simple_3.5_22June.cache

  - name: "gpt-simple-dev"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.gpt_pe gpt-simple-ecb 
        ${vars.ecb-mention-map} ${vars.dev_iter_mids} 
        outputs/ecb/gpt_dev_22June_.json
        dev
        gpt-4
        --cache-file outputs/cache/gpt_simple_4_22June.cache
        

  - name: "single-ann2-results-dev"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.coreference single-ann-results
        ./annotations/ecb/dev/dev_full_srl_ann2_with_dis.jsonl

  - name: "single-ann1-results-dev"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.coreference single-ann-results
        ./annotations/ecb/dev/dev_full_srl_ann1_with_dis.jsonl --use-vn

  - name: "ann1-or-ann2-results-dev"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.coreference or-ann-results
        ./annotations/ecb/dev/dev_full_srl_ann1_with_dis.jsonl
        ./annotations/ecb/dev/dev_full_srl_ann2_with_dis.jsonl
        --use-vn

  - name: "ann1-and-ann2-results-dev"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.coreference and-ann-results
        ./annotations/ecb/dev/dev_full_srl_ann1_with_dis.jsonl
        ./annotations/ecb/dev/dev_full_srl_ann2_with_dis.jsonl

  - name: "stupidly-large"
    help: "run a zero shot learning approach in the event graph generation"
    script:
      - >-
        python -m scripts.coreference run-stupidly-large-exp
        ./annotations/ecb/dev/dev_full_srl_ann2_with_dis.jsonl

  - name: "parsed-gpt-dev"
    script:
      - >-
        python -m scripts.gpt_pe parse-gpt-responses
        outputs/ecb/gpt_dev_22June_.json
        outputs/ecb/gpt_dev_22June_parsed.json
        ${vars.ecb-mention-map}

  - name: "gpt-results-dev"
    script:
      - >-
        python -m scripts.coreference gpt-results
        outputs/ecb/gpt_dev_22June_parsed.json